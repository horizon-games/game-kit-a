export declare function Assert(condition: boolean, ...args: any[]): void;
export declare function Maybe<T>(value: T | undefined, def: T): T;
export declare const maxFloat: number;
export declare const epsilon: number;
export declare const epsilon_sq: number;
export declare const pi: number;
export declare const maxManifoldPoints: number;
export declare const maxPolygonVertices: number;
export declare const aabbExtension: number;
export declare const aabbMultiplier: number;
export declare const linearSlop: number;
export declare const angularSlop: number;
export declare const polygonRadius: number;
export declare const maxSubSteps: number;
export declare const maxTOIContacts: number;
export declare const velocityThreshold: number;
export declare const maxLinearCorrection: number;
export declare const maxAngularCorrection: number;
export declare const maxTranslation: number;
export declare const maxTranslationSquared: number;
export declare const maxRotation: number;
export declare const maxRotationSquared: number;
export declare const baumgarte: number;
export declare const toiBaumgarte: number;
export declare const invalidParticleIndex: number;
export declare const maxParticleIndex: number;
export declare const particleStride: number;
export declare const minParticleWeight: number;
export declare const maxParticlePressure: number;
export declare const maxParticleForce: number;
export declare const maxTriadDistance: number;
export declare const maxTriadDistanceSquared: number;
export declare const minParticleSystemBufferCapacity: number;
export declare const barrierCollisionTime: number;
export declare const timeToSleep: number;
export declare const linearSleepTolerance: number;
export declare const angularSleepTolerance: number;
export declare function Alloc(size: number): any;
export declare function Free(mem: any): void;
export declare function Log(message: string, ...args: any[]): void;
export declare class Version {
    major: number;
    minor: number;
    revision: number;
    constructor(major?: number, minor?: number, revision?: number);
    toString(): string;
}
export declare const version: Version;
export declare const branch: string;
export declare const commit: string;
export declare function ParseInt(v: string): number;
export declare function ParseUInt(v: string): number;
export declare function MakeArray<T>(length: number, init: (i: number) => T): T[];
export declare function MakeNullArray<T>(length: number): Array<T | null>;
export declare function MakeNumberArray(length: number, init?: number): number[];
