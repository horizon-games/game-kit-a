import { Rot, Vec2, XY } from '../../Common/Math';
import { Body } from '../Body';
import { SolverData } from '../TimeStep';
import { IJointDef, Joint, JointDef, JointType } from './Joint';
import { PrismaticJoint } from './PrismaticJoint';
import { RevoluteJoint } from './RevoluteJoint';
export interface IGearJointDef extends IJointDef {
    joint1: RevoluteJoint | PrismaticJoint;
    joint2: RevoluteJoint | PrismaticJoint;
    ratio?: number;
}
export declare class GearJointDef extends JointDef implements IGearJointDef {
    joint1: RevoluteJoint | PrismaticJoint;
    joint2: RevoluteJoint | PrismaticJoint;
    ratio: number;
    constructor();
}
export declare class GearJoint extends Joint {
    private static InitVelocityConstraints_s_u;
    private static InitVelocityConstraints_s_rA;
    private static InitVelocityConstraints_s_rB;
    private static InitVelocityConstraints_s_rC;
    private static InitVelocityConstraints_s_rD;
    private static SolvePositionConstraints_s_u;
    private static SolvePositionConstraints_s_rA;
    private static SolvePositionConstraints_s_rB;
    private static SolvePositionConstraints_s_rC;
    private static SolvePositionConstraints_s_rD;
    m_joint1: RevoluteJoint | PrismaticJoint;
    m_joint2: RevoluteJoint | PrismaticJoint;
    m_typeA: JointType;
    m_typeB: JointType;
    m_bodyC: Body;
    m_bodyD: Body;
    readonly m_localAnchorA: Vec2;
    readonly m_localAnchorB: Vec2;
    readonly m_localAnchorC: Vec2;
    readonly m_localAnchorD: Vec2;
    readonly m_localAxisC: Vec2;
    readonly m_localAxisD: Vec2;
    m_referenceAngleA: number;
    m_referenceAngleB: number;
    m_constant: number;
    m_ratio: number;
    m_impulse: number;
    m_indexA: number;
    m_indexB: number;
    m_indexC: number;
    m_indexD: number;
    readonly m_lcA: Vec2;
    readonly m_lcB: Vec2;
    readonly m_lcC: Vec2;
    readonly m_lcD: Vec2;
    m_mA: number;
    m_mB: number;
    m_mC: number;
    m_mD: number;
    m_iA: number;
    m_iB: number;
    m_iC: number;
    m_iD: number;
    readonly m_JvAC: Vec2;
    readonly m_JvBD: Vec2;
    m_JwA: number;
    m_JwB: number;
    m_JwC: number;
    m_JwD: number;
    m_mass: number;
    readonly m_qA: Rot;
    readonly m_qB: Rot;
    readonly m_qC: Rot;
    readonly m_qD: Rot;
    readonly m_lalcA: Vec2;
    readonly m_lalcB: Vec2;
    readonly m_lalcC: Vec2;
    readonly m_lalcD: Vec2;
    constructor(def: IGearJointDef);
    InitVelocityConstraints(data: SolverData): void;
    SolveVelocityConstraints(data: SolverData): void;
    SolvePositionConstraints(data: SolverData): boolean;
    GetAnchorA<T extends XY>(out: T): T;
    GetAnchorB<T extends XY>(out: T): T;
    GetReactionForce<T extends XY>(inv_dt: number, out: T): T;
    GetReactionTorque(inv_dt: number): number;
    GetJoint1(): PrismaticJoint | RevoluteJoint;
    GetJoint2(): PrismaticJoint | RevoluteJoint;
    GetRatio(): number;
    SetRatio(ratio: number): void;
    Dump(log: (format: string, ...args: any[]) => void): void;
}
