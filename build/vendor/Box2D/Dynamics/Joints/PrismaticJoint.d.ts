import { Mat22, Mat33, Rot, Vec2, Vec3, XY } from '../../Common/Math';
import { Body } from '../Body';
import { SolverData } from '../TimeStep';
import { IJointDef, Joint, JointDef, LimitState } from './Joint';
export interface IPrismaticJointDef extends IJointDef {
    localAnchorA?: XY;
    localAnchorB?: XY;
    localAxisA?: XY;
    referenceAngle?: number;
    enableLimit?: boolean;
    lowerTranslation?: number;
    upperTranslation?: number;
    enableMotor?: boolean;
    maxMotorForce?: number;
    motorSpeed?: number;
}
export declare class PrismaticJointDef extends JointDef implements IPrismaticJointDef {
    readonly localAnchorA: Vec2;
    readonly localAnchorB: Vec2;
    readonly localAxisA: Vec2;
    referenceAngle: number;
    enableLimit: boolean;
    lowerTranslation: number;
    upperTranslation: number;
    enableMotor: boolean;
    maxMotorForce: number;
    motorSpeed: number;
    constructor();
    Initialize(bA: Body, bB: Body, anchor: Vec2, axis: Vec2): void;
}
export declare class PrismaticJoint extends Joint {
    private static InitVelocityConstraints_s_d;
    private static InitVelocityConstraints_s_P;
    private static SolveVelocityConstraints_s_P;
    private static SolveVelocityConstraints_s_f2r;
    private static SolveVelocityConstraints_s_f1;
    private static SolveVelocityConstraints_s_df3;
    private static SolveVelocityConstraints_s_df2;
    private static SolvePositionConstraints_s_d;
    private static SolvePositionConstraints_s_impulse;
    private static SolvePositionConstraints_s_impulse1;
    private static SolvePositionConstraints_s_P;
    private static GetJointTranslation_s_pA;
    private static GetJointTranslation_s_pB;
    private static GetJointTranslation_s_d;
    private static GetJointTranslation_s_axis;
    readonly m_localAnchorA: Vec2;
    readonly m_localAnchorB: Vec2;
    readonly m_localXAxisA: Vec2;
    readonly m_localYAxisA: Vec2;
    m_referenceAngle: number;
    readonly m_impulse: Vec3;
    m_motorImpulse: number;
    m_lowerTranslation: number;
    m_upperTranslation: number;
    m_maxMotorForce: number;
    m_motorSpeed: number;
    m_enableLimit: boolean;
    m_enableMotor: boolean;
    m_limitState: LimitState;
    m_indexA: number;
    m_indexB: number;
    readonly m_localCenterA: Vec2;
    readonly m_localCenterB: Vec2;
    m_invMassA: number;
    m_invMassB: number;
    m_invIA: number;
    m_invIB: number;
    readonly m_axis: Vec2;
    readonly m_perp: Vec2;
    m_s1: number;
    m_s2: number;
    m_a1: number;
    m_a2: number;
    readonly m_K: Mat33;
    readonly m_K3: Mat33;
    readonly m_K2: Mat22;
    m_motorMass: number;
    readonly m_qA: Rot;
    readonly m_qB: Rot;
    readonly m_lalcA: Vec2;
    readonly m_lalcB: Vec2;
    readonly m_rA: Vec2;
    readonly m_rB: Vec2;
    constructor(def: IPrismaticJointDef);
    InitVelocityConstraints(data: SolverData): void;
    SolveVelocityConstraints(data: SolverData): void;
    SolvePositionConstraints(data: SolverData): boolean;
    GetAnchorA<T extends XY>(out: T): T;
    GetAnchorB<T extends XY>(out: T): T;
    GetReactionForce<T extends XY>(inv_dt: number, out: T): T;
    GetReactionTorque(inv_dt: number): number;
    GetLocalAnchorA(): Readonly<Vec2>;
    GetLocalAnchorB(): Readonly<Vec2>;
    GetLocalAxisA(): Readonly<Vec2>;
    GetReferenceAngle(): number;
    GetJointTranslation(): number;
    GetJointSpeed(): number;
    IsLimitEnabled(): boolean;
    EnableLimit(flag: boolean): void;
    GetLowerLimit(): number;
    GetUpperLimit(): number;
    SetLimits(lower: number, upper: number): void;
    IsMotorEnabled(): boolean;
    EnableMotor(flag: boolean): void;
    SetMotorSpeed(speed: number): void;
    GetMotorSpeed(): number;
    SetMaxMotorForce(force: number): void;
    GetMaxMotorForce(): number;
    GetMotorForce(inv_dt: number): number;
    Dump(log: (format: string, ...args: any[]) => void): void;
}
