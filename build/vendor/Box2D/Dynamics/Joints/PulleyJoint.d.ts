import { Rot, Vec2, XY } from '../../Common/Math';
import { Body } from '../Body';
import { SolverData } from '../TimeStep';
import { IJointDef, Joint, JointDef } from './Joint';
export declare const minPulleyLength: number;
export interface IPulleyJointDef extends IJointDef {
    groundAnchorA?: XY;
    groundAnchorB?: XY;
    localAnchorA?: XY;
    localAnchorB?: XY;
    lengthA?: number;
    lengthB?: number;
    ratio?: number;
}
export declare class PulleyJointDef extends JointDef implements IPulleyJointDef {
    readonly groundAnchorA: Vec2;
    readonly groundAnchorB: Vec2;
    readonly localAnchorA: Vec2;
    readonly localAnchorB: Vec2;
    lengthA: number;
    lengthB: number;
    ratio: number;
    constructor();
    Initialize(bA: Body, bB: Body, groundA: Vec2, groundB: Vec2, anchorA: Vec2, anchorB: Vec2, r: number): void;
}
export declare class PulleyJoint extends Joint {
    private static InitVelocityConstraints_s_PA;
    private static InitVelocityConstraints_s_PB;
    private static SolveVelocityConstraints_s_vpA;
    private static SolveVelocityConstraints_s_vpB;
    private static SolveVelocityConstraints_s_PA;
    private static SolveVelocityConstraints_s_PB;
    private static SolvePositionConstraints_s_PA;
    private static SolvePositionConstraints_s_PB;
    private static GetCurrentLengthA_s_p;
    private static GetCurrentLengthB_s_p;
    readonly m_groundAnchorA: Vec2;
    readonly m_groundAnchorB: Vec2;
    m_lengthA: number;
    m_lengthB: number;
    readonly m_localAnchorA: Vec2;
    readonly m_localAnchorB: Vec2;
    m_constant: number;
    m_ratio: number;
    m_impulse: number;
    m_indexA: number;
    m_indexB: number;
    readonly m_uA: Vec2;
    readonly m_uB: Vec2;
    readonly m_rA: Vec2;
    readonly m_rB: Vec2;
    readonly m_localCenterA: Vec2;
    readonly m_localCenterB: Vec2;
    m_invMassA: number;
    m_invMassB: number;
    m_invIA: number;
    m_invIB: number;
    m_mass: number;
    readonly m_qA: Rot;
    readonly m_qB: Rot;
    readonly m_lalcA: Vec2;
    readonly m_lalcB: Vec2;
    constructor(def: IPulleyJointDef);
    InitVelocityConstraints(data: SolverData): void;
    SolveVelocityConstraints(data: SolverData): void;
    SolvePositionConstraints(data: SolverData): boolean;
    GetAnchorA<T extends XY>(out: T): T;
    GetAnchorB<T extends XY>(out: T): T;
    GetReactionForce<T extends XY>(inv_dt: number, out: T): T;
    GetReactionTorque(inv_dt: number): number;
    GetGroundAnchorA(): Vec2;
    GetGroundAnchorB(): Vec2;
    GetLengthA(): number;
    GetLengthB(): number;
    GetRatio(): number;
    GetCurrentLengthA(): number;
    GetCurrentLengthB(): number;
    Dump(log: (format: string, ...args: any[]) => void): void;
    ShiftOrigin(newOrigin: Vec2): void;
}
