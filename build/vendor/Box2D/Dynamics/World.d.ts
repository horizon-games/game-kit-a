import { AABB } from '../Collision/Collision';
import { Shape } from '../Collision/Shapes/Shape';
import { Color, Draw } from '../Common/Draw';
import { Transform, Vec2, XY } from '../Common/Math';
import { Controller } from '../Controllers/Controller';
import { ParticleSystem, ParticleSystemDef } from '../Particle/ParticleSystem';
import { Body, IBodyDef } from './Body';
import { ContactManager } from './ContactManager';
import { Contact } from './Contacts/Contact';
import { Fixture } from './Fixture';
import { Island } from './Island';
import { AreaJoint, IAreaJointDef } from './Joints/AreaJoint';
import { DistanceJoint, IDistanceJointDef } from './Joints/DistanceJoint';
import { FrictionJoint, IFrictionJointDef } from './Joints/FrictionJoint';
import { GearJoint, IGearJointDef } from './Joints/GearJoint';
import { Joint } from './Joints/Joint';
import { IMotorJointDef, MotorJoint } from './Joints/MotorJoint';
import { IMouseJointDef, MouseJoint } from './Joints/MouseJoint';
import { IPrismaticJointDef, PrismaticJoint } from './Joints/PrismaticJoint';
import { IPulleyJointDef, PulleyJoint } from './Joints/PulleyJoint';
import { IRevoluteJointDef, RevoluteJoint } from './Joints/RevoluteJoint';
import { IRopeJointDef, RopeJoint } from './Joints/RopeJoint';
import { IWeldJointDef, WeldJoint } from './Joints/WeldJoint';
import { IWheelJointDef, WheelJoint } from './Joints/WheelJoint';
import { Profile, TimeStep } from './TimeStep';
import { ContactFilter, ContactListener, DestructionListener, QueryCallback, QueryCallbackFunction, RayCastCallback, RayCastCallbackFunction } from './WorldCallbacks';
export declare class World {
    private static Step_s_step;
    private static Step_s_stepTimer;
    private static Step_s_timer;
    private static DrawDebugData_s_color;
    private static DrawDebugData_s_vs;
    private static DrawDebugData_s_xf;
    private static QueryFixtureShape_s_aabb;
    private static RayCast_s_input;
    private static RayCast_s_output;
    private static RayCast_s_point;
    private static DrawJoint_s_p1;
    private static DrawJoint_s_p2;
    private static DrawJoint_s_color;
    private static DrawJoint_s_c;
    private static DrawShape_s_ghostColor;
    private static SolveTOI_s_subStep;
    private static SolveTOI_s_backup;
    private static SolveTOI_s_backup1;
    private static SolveTOI_s_backup2;
    private static SolveTOI_s_toi_input;
    private static SolveTOI_s_toi_output;
    private static _Joint_Create;
    private static _Joint_Destroy;
    m_newFixture: boolean;
    m_locked: boolean;
    m_clearForces: boolean;
    readonly m_contactManager: ContactManager;
    m_bodyList: Body | null;
    m_jointList: Joint | null;
    m_particleSystemList: ParticleSystem | null;
    m_bodyCount: number;
    m_jointCount: number;
    readonly m_gravity: Vec2;
    m_allowSleep: boolean;
    m_destructionListener: DestructionListener | null;
    m_debugDraw: Draw | null;
    m_inv_dt0: number;
    m_warmStarting: boolean;
    m_continuousPhysics: boolean;
    m_subStepping: boolean;
    m_stepComplete: boolean;
    readonly m_profile: Profile;
    readonly m_island: Island;
    readonly s_stack: Array<Body | null>;
    m_controllerList: Controller | null;
    m_controllerCount: number;
    constructor(gravity: XY);
    SetDestructionListener(listener: DestructionListener | null): void;
    SetContactFilter(filter: ContactFilter): void;
    SetContactListener(listener: ContactListener): void;
    SetDebugDraw(debugDraw: Draw | null): void;
    CreateBody(def?: IBodyDef): Body;
    DestroyBody(b: Body): void;
    CreateJoint(def: IAreaJointDef): AreaJoint;
    CreateJoint(def: IDistanceJointDef): DistanceJoint;
    CreateJoint(def: IFrictionJointDef): FrictionJoint;
    CreateJoint(def: IGearJointDef): GearJoint;
    CreateJoint(def: IMotorJointDef): MotorJoint;
    CreateJoint(def: IMouseJointDef): MouseJoint;
    CreateJoint(def: IPrismaticJointDef): PrismaticJoint;
    CreateJoint(def: IPulleyJointDef): PulleyJoint;
    CreateJoint(def: IRevoluteJointDef): RevoluteJoint;
    CreateJoint(def: IRopeJointDef): RopeJoint;
    CreateJoint(def: IWeldJointDef): WeldJoint;
    CreateJoint(def: IWheelJointDef): WheelJoint;
    DestroyJoint(j: Joint): void;
    CreateParticleSystem(def: ParticleSystemDef): ParticleSystem;
    DestroyParticleSystem(p: ParticleSystem): void;
    CalculateReasonableParticleIterations(timeStep: number): number;
    Step(dt: number, velocityIterations: number, positionIterations: number, particleIterations?: number): void;
    ClearForces(): void;
    DrawParticleSystem(system: ParticleSystem): void;
    DrawDebugData(): void;
    QueryAABB(callback: QueryCallback | null, aabb: AABB, fn?: QueryCallbackFunction): void;
    QueryAllAABB(aabb: AABB, out?: Fixture[]): Fixture[];
    QueryPointAABB(callback: QueryCallback | null, point: Vec2, fn?: QueryCallbackFunction): void;
    QueryAllPointAABB(point: Vec2, out?: Fixture[]): Fixture[];
    QueryFixtureShape(callback: QueryCallback | null, shape: Shape, index: number, transform: Transform, fn?: QueryCallbackFunction): void;
    QueryAllFixtureShape(shape: Shape, index: number, transform: Transform, out?: Fixture[]): Fixture[];
    QueryFixturePoint(callback: QueryCallback | null, point: Vec2, fn?: QueryCallbackFunction): void;
    QueryAllFixturePoint(point: Vec2, out?: Fixture[]): Fixture[];
    RayCast(callback: RayCastCallback | null, point1: Vec2, point2: Vec2, fn?: RayCastCallbackFunction): void;
    RayCastOne(point1: Vec2, point2: Vec2): Fixture | null;
    RayCastAll(point1: Vec2, point2: Vec2, out?: Fixture[]): Fixture[];
    GetBodyList(): Body | null;
    GetJointList(): Joint | null;
    GetParticleSystemList(): ParticleSystem | null;
    GetContactList(): Contact | null;
    SetAllowSleeping(flag: boolean): void;
    GetAllowSleeping(): boolean;
    SetWarmStarting(flag: boolean): void;
    GetWarmStarting(): boolean;
    SetContinuousPhysics(flag: boolean): void;
    GetContinuousPhysics(): boolean;
    SetSubStepping(flag: boolean): void;
    GetSubStepping(): boolean;
    GetProxyCount(): number;
    GetBodyCount(): number;
    GetJointCount(): number;
    GetContactCount(): number;
    GetTreeHeight(): number;
    GetTreeBalance(): number;
    GetTreeQuality(): number;
    SetGravity(gravity: XY, wake?: boolean): void;
    GetGravity(): Readonly<Vec2>;
    IsLocked(): boolean;
    SetAutoClearForces(flag: boolean): void;
    GetAutoClearForces(): boolean;
    ShiftOrigin(newOrigin: XY): void;
    GetContactManager(): ContactManager;
    GetProfile(): Profile;
    Dump(log: (format: string, ...args: any[]) => void): void;
    DrawJoint(joint: Joint): void;
    DrawShape(fixture: Fixture, color: Color): void;
    Solve(step: TimeStep): void;
    SolveTOI(step: TimeStep): void;
    AddController(controller: Controller): Controller;
    RemoveController(controller: Controller): Controller;
}
