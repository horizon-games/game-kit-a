import { Manifold, WorldManifold } from '../../Collision/Collision';
import { Sweep, Transform } from '../../Common/Math';
import { Body } from '../Body';
import { Fixture } from '../Fixture';
import { ContactListener } from '../WorldCallbacks';
export declare function MixFriction(friction1: number, friction2: number): number;
export declare function MixRestitution(restitution1: number, restitution2: number): number;
export declare class ContactEdge {
    other: Body;
    contact: Contact;
    prev: ContactEdge | null;
    next: ContactEdge | null;
    constructor(contact: Contact);
}
export declare abstract class Contact {
    private static ComputeTOI_s_input;
    private static ComputeTOI_s_output;
    m_islandFlag: boolean;
    m_touchingFlag: boolean;
    m_enabledFlag: boolean;
    m_filterFlag: boolean;
    m_bulletHitFlag: boolean;
    m_toiFlag: boolean;
    m_prev: Contact | null;
    m_next: Contact | null;
    readonly m_nodeA: ContactEdge;
    readonly m_nodeB: ContactEdge;
    m_fixtureA: Fixture;
    m_fixtureB: Fixture;
    m_indexA: number;
    m_indexB: number;
    m_manifold: Manifold;
    m_toiCount: number;
    m_toi: number;
    m_friction: number;
    m_restitution: number;
    m_tangentSpeed: number;
    m_oldManifold: Manifold;
    constructor();
    GetManifold(): Manifold;
    GetWorldManifold(worldManifold: WorldManifold): void;
    IsTouching(): boolean;
    SetEnabled(flag: boolean): void;
    IsEnabled(): boolean;
    GetNext(): Contact | null;
    GetFixtureA(): Fixture;
    GetChildIndexA(): number;
    GetFixtureB(): Fixture;
    GetChildIndexB(): number;
    abstract Evaluate(manifold: Manifold, xfA: Transform, xfB: Transform): void;
    FlagForFiltering(): void;
    SetFriction(friction: number): void;
    GetFriction(): number;
    ResetFriction(): void;
    SetRestitution(restitution: number): void;
    GetRestitution(): number;
    ResetRestitution(): void;
    SetTangentSpeed(speed: number): void;
    GetTangentSpeed(): number;
    Reset(fixtureA: Fixture, indexA: number, fixtureB: Fixture, indexB: number): void;
    Update(listener: ContactListener): void;
    ComputeTOI(sweepA: Sweep, sweepB: Sweep): number;
}
