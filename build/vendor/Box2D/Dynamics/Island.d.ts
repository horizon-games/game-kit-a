import { Vec2 } from '../Common/Math';
import { Body } from './Body';
import { Contact } from './Contacts/Contact';
import { ContactVelocityConstraint } from './Contacts/ContactSolver';
import { Joint } from './Joints/Joint';
import { Position, Profile, TimeStep, Velocity } from './TimeStep';
import { ContactListener } from './WorldCallbacks';
export declare class Island {
    private static s_timer;
    private static s_solverData;
    private static s_contactSolverDef;
    private static s_contactSolver;
    private static s_translation;
    private static s_impulse;
    m_allocator: any;
    m_listener: ContactListener;
    m_bodies: Body[];
    m_contacts: Contact[];
    m_joints: Joint[];
    m_positions: Position[];
    m_velocities: Velocity[];
    m_bodyCount: number;
    m_jointCount: number;
    m_contactCount: number;
    m_bodyCapacity: number;
    m_contactCapacity: number;
    m_jointCapacity: number;
    Initialize(bodyCapacity: number, contactCapacity: number, jointCapacity: number, allocator: any, listener: ContactListener): void;
    Clear(): void;
    AddBody(body: Body): void;
    AddContact(contact: Contact): void;
    AddJoint(joint: Joint): void;
    Solve(profile: Profile, step: TimeStep, gravity: Vec2, allowSleep: boolean): void;
    SolveTOI(subStep: TimeStep, toiIndexA: number, toiIndexB: number): void;
    Report(constraints: ContactVelocityConstraint[]): void;
}
