import { Camera, Object3D, Plane, Vector3 } from 'three';
export declare function clamp(val: number, min: number, max: number): number;
export declare function absFloor(val: number): number;
export declare function closeEnough(val: number, val2: number): boolean;
export declare const TWO_PI: number;
export declare const RADIANS_TO_DEGREES: number;
export declare const DEGREES_TO_RADIANS: number;
export declare function radiansToDegrees(radians: number): number;
export declare function degreesToRadians(degrees: number): number;
export declare function get2DPositionOnPlane(camera: Camera, cameraWorldPos: Vector3, x: number, y: number, plane: Plane): Vector3;
export declare function get2DPositionAtDepth(camera: Camera, cameraWorldPos: Vector3, x: number, y: number, atDepth?: number): Vector3;
export declare function get2DPositionOnPlaneHelper(camera: Camera, cameraWorldPos: Vector3, x: number, y: number, coPlanarPoint: Vector3, normal: Vector3): Vector3;
export declare function getPixelOnGroundPlane(camera: Camera, cameraWorldPos: Vector3, x: number, y: number, depth?: number): Vector3;
export declare function hitTestAtPixel(x: number, y: number, items: Object3D[], reaction: (item: Object3D, position: Vector3) => boolean, camera: Camera): void;
export declare function lerp(a: number, b: number, dt: number): number;
export declare function unlerp(min: number, max: number, value: number): number;
export declare function unlerpClamped(min: number, max: number, value: number): number;
export declare function degreesDifference(A: number, B: number): number;
export declare function radiansDifference(a: number, b: number): number;
export declare function rand(min?: number, max?: number): number;
export declare function rand2(scale?: number, offset?: number): number;
export declare function nextHighestPowerOfTwo(val: number): number;
export declare function inferDirection(val: number, tolerance?: number): 0 | 1 | -1;
export declare function sqr(v: number): number;
export declare function pixelLengthOnScreen(a: Vector3, b: Vector3, camera: Camera): number;
